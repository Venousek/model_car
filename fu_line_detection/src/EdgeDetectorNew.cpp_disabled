//
//  LaneDetector.cpp
//  TestExtendedDetector
//
/**
Copyright (c)
Audi Autonomous Driving Cup. Team MomenTUM . All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
3. All advertising materials mentioning features or use of this software must display the following acknowledgement: “This product includes software developed by the Audi AG and its contributors for Audi Autonomous Driving Cup.”
4. Neither the name of Audi nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY AUDI AG AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL AUDI AG OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

 **/

/***************************************************************************
 * $Author:: Paul Bergmann $  $Date:: 2015-01-15 13:29:48#$ $Rev:: 26104  $*
 ***************************************************************************/

#include "LaneDetector.h"
#include <ros/package.h>

//#define PATH_2FEATURES "/home/vena/Dropbox/lane_detection/catkin_ws/src/line_detection/src/strongClassifiers/classifier_2features.txt"
//#define PATH_30FEATURES "/home/vena/Dropbox/lane_detection/catkin_ws/src/line_detection/src/strongClassifiers/classifier_30features.txt"


LaneDetector::LaneDetector(int size,Point p1,Point p2, int image_h_, int image_w_, int roi_top_w_, int roi_bottom_w_,
    std::string path_2features, std::string path_30features) : classifier_2features(path_2features,0.5),classifier_30features(path_30features,0.5)
{
    detectorSize = size;
    detectorSizeHalf = size/2;
    foe_1 = p1;
    foe_2 = p2;
    image_w = image_w_;
    image_h = image_h_;
    image_w_half = image_w/2;
    roi_top_w = roi_top_w_;
    roi_bottom_w = roi_bottom_w_;
}

vector<Point2d> LaneDetector::detect(Mat grayscaleImage,Mat sobeledImage,Mat groundplaneImage)
{
    vector<Point2d> detectedMarkers;
    
    int totalDetectors = 0;
    int detectorsEval  = 0;
    

    //sobel the input image
    /*Mat sobeledImage;

    Mat grad_x,grad_y;
    Mat abs_grad_x,abs_grad_y;

    Sobel(grayscaleImage,grad_x,grayscaleImage.depth(),1,0);
    convertScaleAbs(grad_x,abs_grad_x);

    Sobel(grayscaleImage,grad_y,grayscaleImage.depth(),0,1);
    convertScaleAbs(grad_y,abs_grad_y);

    addWeighted(abs_grad_x,0.5,abs_grad_y,0.5,0,sobeledImage);*/

    vector<Point> checkContour;
    checkContour.push_back(Point(image_w_half-(roi_bottom_w/2),image_h-1));
    checkContour.push_back(Point(image_w_half+(roi_bottom_w/2),image_h-1));
    checkContour.push_back(Point(image_w_half+(roi_top_w/2),0));
    checkContour.push_back(Point(image_w_half-(roi_top_w/2),0));


    for(int i = foe_1.y;i < foe_2.y-detectorSize;i+=6)
    {
        for(int j = foe_1.x;j < foe_2.x-detectorSize;j+=1)
        {

            if(pointPolygonTest(checkContour, Point(j+detectorSizeHalf,i+detectorSizeHalf),false) < 0)
            {
                continue;
            }


            totalDetectors++;
            
            if(groundplaneImage.at<uchar>(i+detectorSizeHalf,j+detectorSizeHalf) == 0)continue;
            if(sobeledImage.at<uchar>(i+detectorSizeHalf,j+detectorSizeHalf) < 100)continue;

            Rect x(j,i,detectorSize,detectorSize);
            Mat detectorGray = grayscaleImage(x);
                    
            
            Mat integralImage;Mat rotatedIntegralImage;Mat dummy;
            cv::integral(detectorGray, integralImage, dummy, rotatedIntegralImage);
            int classifyResult = classifier_2features.classifyImage(integralImage, rotatedIntegralImage);

            if(classifyResult == 0)continue;
            
            classifyResult = classifier_30features.classifyImage(integralImage, rotatedIntegralImage);

            detectorsEval++;

            if(classifyResult == 1)
            {
                //imshow("CORRECT",detectorGray);
                //waitKey(1);

                //cout << "Center of marking: " << j+detectorSizeHalf << "/" << i+detectorSizeHalf << endl;
                
                Point2d newPoint(j+detectorSizeHalf,i+detectorSizeHalf);
                detectedMarkers.push_back(newPoint);
                detectedMarkers.push_back(newPoint+Point2d(0,2));
                detectedMarkers.push_back(newPoint+Point2d(0,-2));

                detectedMarkers.push_back(newPoint+Point2d(-1,0));
                detectedMarkers.push_back(newPoint+Point2d(-1,2));
                detectedMarkers.push_back(newPoint+Point2d(-1,-2));

                detectedMarkers.push_back(newPoint+Point2d(1,0));
                detectedMarkers.push_back(newPoint+Point2d(1,2));
                detectedMarkers.push_back(newPoint+Point2d(1,-2));
                //detectedMarkers.push_back(newPoint+Point2d(0,-2));
                //detectedMarkers.push_back(newPoint+Point2d(0,2));
            }
        }
    }
    
    //cout << detectorsEval << "/" << totalDetectors << endl;
    return detectedMarkers;
}



void EdgeDetector::execute() {
    const CameraROI &roi = getCameraROI();
    const ImageDimensions &imgDim = getImageDimensions();
    Edges &edges = getEdges();

    // do nothing if no image
    // in this case we can't even calculate new scanlines
    // due to possible inconsistencies between roi and future images
    if ((imgDim.imageHeight == 0) || (imgDim.imageWidth == 0)) {
        WARNING("EdgeDetector: uninitialized image, abort execute.")
        return;
    }

    // calculate scanlines and use them in all further executions
    if (initializeScanlines || roi.isDirty) {
        INFO("EdgeDetector: (Re)calculating scanlines.")
        scanlinesFront = getScanlines(Side::FRONT);
        initializeScanlines = false;
    }
/*
    DRAWDEBUG( dbgScanlinesFront, {
        SETCOLORGREEN;
        for (auto scanline : scanlinesFront) {
            for (auto segment : scanline) {
                LINE(
                    segment.getStart().getX(),
                    segment.getStart().getY(),
                    segment.getEnd().getX(),
                    segment.getEnd().getY()
                );
            }
        }
    });*/

    // start worker threads to find edges in one region each
    std::future<vector<vector<EdgePoint>>> edgePointsFront = std::async(
            std::launch::async,
            &EdgeDetector::scanSide,
            this,
            Side::FRONT,
            scanlinesFront
        );


    vector<vector<EdgePoint>> front(std::move(edgePointsFront.get()));
/*
    DRAWDEBUG( dbgEdgeCandidatesFront, {
            for (auto scanline : front) {
                for (auto edgePoint : scanline) {
                    if (edgePoint.isPositive()) { SETCOLORGREEN; }
                    else { SETCOLORRED; }
                    auto pos = edgePoint.getImgPos();
                    RECTANGLEFILLED(pos.getX(), pos.getY(), 2 , 2)
                }
            }
    });

    DRAWDEBUG( dbgEdgeCandidatesFrontRel, {
            for (auto scanline : front) {
                for (auto edgePoint : scanline) {
                    if (edgePoint.isPositive()) { SETCOLORGREEN; }
                    else { SETCOLORRED; }
                    auto pos = edgePoint.getRelPos();
                    RECTANGLEFILLED(Centimeter(pos.getX()).value(), Centimeter(pos.getY()).value(), 3 , 3)
                }
            }
    });*/

    edges.setEdgeListFront(std::move(front));
    return;
}

//TODO: Jannis: add necessary margins for kernel

/**
 * Compute scanlines. Each may consist of multiple segments, split at regions
 * that should not be inspected by the kernel.
 * @param side
 * @return vector of segments of scanlines, walk these segments with the kernel
 */
vector<vector<LineSegment<int>>> EdgeDetector::getScanlines() {
    vector<vector<LineSegment<int>>> scanlines;
    const CameraROI roi = getCameraROI();
    int distance = 1;
    int count = 0;
    int offsetStart = 0;
    int sideWidth = 0;
    // select distance between scanlines, count,
    // pick right offset and calculate width, all w.r.t. side
    // remember, left and right are mirrored
    
    distance = m_frontDistance;
    count = m_frontCount;
    offsetStart = roi.getCenter().getX();
    // think about kernel height
    sideWidth = offsetStart - roi.getImageBox().getTopleft().getX() -1;
    
    int scanlineStart = roi.getImageBox().getTopleft().getY();
    int scanlineEnd = roi.getImageBox().getBottomright().getY();


    int offset;
    int segmentStart = -1;
    vector<LineSegment<int>> scanline;
    for (int i = 0; (i/distance) < count && i <= sideWidth; i += distance) {
        scanline = vector<LineSegment<int>>();
        // walk relative to starting point, direction according to side
        offset = offsetStart - i;
        
        // walk along line
        for (int j = scanlineStart; j <= scanlineEnd; j ++) {
            bool isInside = roi.isInside(Point<int>(offset, j));
            
            // start new scanline segment
            if (isInside && j < scanlineEnd) {
                if (segmentStart == -1) segmentStart = j;
            // found end of scanline segment, reset start
            } else if (segmentStart != -1) {                
                scanline.push_back(
                        LineSegment<int>(
                                Point<int>(offset, segmentStart),
                                Point<int>(offset, j-1)
                            )
                        );
                
                segmentStart = -1;
            }
        }
        // push segments found
        if (scanline.size()) {
            scanlines.push_back(scanline);
        }
    }
    return scanlines;
}

/**
 * Walk with prewitt/sobel kernel along all scanlines of one side.
 * @param side
 * @return All edgePoints on side, sorted by scanlines.
 */
vector<vector<EdgePoint>> EdgeDetector::scanSide(vector<vector<LineSegment<int>>> scanlines) {
    vector<vector<EdgePoint>> sideEdgePoints;
    const Image &image = getImage();
    const ImageDimensions &imgDim = getImageDimensions();
    const OmnidirectionalCameraMatrix &cameraMatrix = getOmnidirectionalCameraMatrix();

    // scanline length can maximal be image height/width
    int scanlineMaxLength = imgDim.imageHeight;
    
    // store kernel results on current scanline in here
    vector<int> scanlineVals(scanlineMaxLength, 0);

    // walk over all scanlines
    for (auto scanline : scanlines) {
        // set all brightness values on scanline to 0;
        std::fill(scanlineVals.begin(), scanlineVals.end(), 0);
        int offset = 0;
        if (scanline.size()) {
            offset = scanline.front().getStart().getX();            
        }
        // scanline consisting of multiple segments
        // walk over each but store kernel results for whole scanline
        for (auto segment : scanline) {         
            int start = segment.getStart().getY();
            int end = segment.getEnd().getY();
            
            // walk along segment
            for (int i = start; i < end - g_kernel1DWidth; i++) {
                int sum = 0;
                // height of kernel (now 3)
//              for (int j = -1; j < 2; j++) {
//                  for (int k = 0; k < g_prewitKernel1DWidth; k++) {
//                      int brightness = 0;
//                      if (side == Side::FRONT || side == Side::BACK) {
//                          brightness = image.getPixelBrightness(offset + j, i + k);
//                      }
//                      else {
//                          brightness = image.getPixelBrightness(i + k, offset + j);
//                      }
//                      if (brightness != 0) {
//                          sum += g_prewitKernel1D[k] * brightness;
//                      }
//                  }

                /*
                 * Sorry, I'm gonna do loop unrolling. It increases the kernel performance by
                 * approximately 3 ms :). Of course you will revert this if you prefer clear
                 * code over runntime.
                 * Kernel width stays 7, height 3.
                 */
                if (side == Side::FRONT || side == Side::BACK) {
                    // comment in for kernel width 7
//                  sum -= image.getPixelBrightness(offset -1, i);
//                  sum -= image.getPixelBrightness(offset -1, i+1);
//                  sum -= image.getPixelBrightness(offset -1, i+2);
//                  // kernel is 0
//                  sum += image.getPixelBrightness(offset -1, i+4);
//                  sum += image.getPixelBrightness(offset -1, i+5);
//                  sum += image.getPixelBrightness(offset -1, i+6);
//
//                  sum -= image.getPixelBrightness(offset, i);
//                  sum -= image.getPixelBrightness(offset, i+1);
//                  sum -= image.getPixelBrightness(offset, i+2);
//                  // kernel is 0
//                  sum += image.getPixelBrightness(offset, i+4);
//                  sum += image.getPixelBrightness(offset, i+5);
//                  sum += image.getPixelBrightness(offset, i+6);
//
//                  sum -= image.getPixelBrightness(offset+1, i);
//                  sum -= image.getPixelBrightness(offset+1, i+1);
//                  sum -= image.getPixelBrightness(offset+1, i+2);
//                  // kernel is 0
//                  sum += image.getPixelBrightness(offset+1, i+4);
//                  sum += image.getPixelBrightness(offset+1, i+5);
//                  sum += image.getPixelBrightness(offset+1, i+6);

                    // use kernel width 5 and try sobel kernel
                    sum -= image.getPixelBrightness(offset -1, i);
                    sum -= image.getPixelBrightness(offset -1, i+1);
                    // kernel is 0
                    sum += image.getPixelBrightness(offset -1, i+3);
                    sum += image.getPixelBrightness(offset -1, i+4);

                    sum -= 2*image.getPixelBrightness(offset, i);
                    sum -= 2*image.getPixelBrightness(offset, i+1);
                    // kernel is 0
                    sum += 2*image.getPixelBrightness(offset, i+3);
                    sum += 2*image.getPixelBrightness(offset, i+4);

                    sum -= image.getPixelBrightness(offset +1, i);
                    sum -= image.getPixelBrightness(offset +1, i+1);
                    // kernel is 0
                    sum += image.getPixelBrightness(offset +1, i+3);
                    sum += image.getPixelBrightness(offset +1, i+4);
                }
                else {
                    // comment in for kernel width 7
//                  sum -= image.getPixelBrightness(i, offset-1);
//                  sum -= image.getPixelBrightness(i+1, offset-1);
//                  sum -= image.getPixelBrightness(i+2, offset-1);
//                  // kernel is 0
//                  sum += image.getPixelBrightness(i+4, offset-1);
//                  sum += image.getPixelBrightness(i+5, offset-1);
//                  sum += image.getPixelBrightness(i+6, offset-1);
//
//                  sum -= image.getPixelBrightness(i, offset);
//                  sum -= image.getPixelBrightness(i+1, offset);
//                  sum -= image.getPixelBrightness(i+2, offset);
//                  // kernel is 0
//                  sum += image.getPixelBrightness(i+4, offset);
//                  sum += image.getPixelBrightness(i+5, offset);
//                  sum += image.getPixelBrightness(i+6, offset);
//
//                  sum -= image.getPixelBrightness(i, offset+1);
//                  sum -= image.getPixelBrightness(i+1, offset+1);
//                  sum -= image.getPixelBrightness(i+2, offset+1);
//                  // kernel is 0
//                  sum += image.getPixelBrightness(i+4, offset+1);
//                  sum += image.getPixelBrightness(i+5, offset+1);
//                  sum += image.getPixelBrightness(i+6, offset+1);

                    // use kernel width 5 and try sobel kernel
                    sum -= image.getPixelBrightness(i, offset-1);
                    sum -= image.getPixelBrightness(i+1, offset-1);
                    // kernel is 0
                    sum += image.getPixelBrightness(i+2, offset-1);
                    sum += image.getPixelBrightness(i+4, offset-1);

                    sum -= 2*image.getPixelBrightness(i, offset);
                    sum -= 2*image.getPixelBrightness(i+1, offset);
                    // kernel is 0
                    sum += 2*image.getPixelBrightness(i+2, offset);
                    sum += 2*image.getPixelBrightness(i+4, offset);

                    sum -= image.getPixelBrightness(i, offset+1);
                    sum -= image.getPixelBrightness(i+1, offset+1);
                    // kernel is 0
                    sum += image.getPixelBrightness(i+2, offset+1);
                    sum += image.getPixelBrightness(i+4, offset+1);
                }
                // +4 because of sobel weighting
                sum = sum / (3 * g_kernel1DWidth + 4);
                if (std::abs(sum) > m_gradientThreshold) {
                    // set scanlineVals at center of kernel
                    scanlineVals[i + g_kernel1DWidth/2] = sum;
                }
            }
        }

        // after walking over all segments of one scanline
        // do non-max-suppression
        // for both minima and maxima at same time
        // TODO: Jannis: find dryer way
        int indexOfLastMaximum = 0;
        int valueOfLastMaximum = 0;
        int indexOfLastMinimum = 0;
        int valueOfLastMinimum = 0;
        for (int i = 1; i < scanlineMaxLength -1; i++) {
            // check if maximum
            if (scanlineVals[i] > 0) {
                if (scanlineVals[i] < scanlineVals[i-1] or scanlineVals[i] < scanlineVals[i+1]) {
                    scanlineVals[i] = 0;
                }
                else {
                    // this pixel can just survive if the next maximum is not too close
                    if (i - indexOfLastMaximum > m_nonMaxWidth) {
                        // this is a new maximum
                        indexOfLastMaximum = i;
                        valueOfLastMaximum = scanlineVals[i];
                    }
                    else {
                        if (valueOfLastMaximum < scanlineVals[i]) {
                            // this is a new maximum
                            // drop the old maximum
                            scanlineVals[indexOfLastMaximum] = 0;
                            indexOfLastMaximum = i;
                            valueOfLastMaximum = scanlineVals[i];
                        }
                        else {
                            scanlineVals[i] = 0;
                        }
                    }
                }
            }
            // check if minimum
            if (scanlineVals[i] < 0) {
                if (scanlineVals[i] > scanlineVals[i-1] or scanlineVals[i] > scanlineVals[i+1]) {
                    scanlineVals[i] = 0;
                }
                else {
                    // this pixel can just survive if the next minimum is not too close
                    if (i - indexOfLastMinimum > m_nonMaxWidth) {
                        // this is a new minimum
                        indexOfLastMinimum = i;
                        valueOfLastMinimum = scanlineVals[i];
                    }
                    else {
                        if (valueOfLastMinimum > scanlineVals[i]) {
                            // this is a new maximum
                            // drop the old maximum
                            scanlineVals[indexOfLastMinimum] = 0;
                            indexOfLastMinimum = i;
                            valueOfLastMinimum = scanlineVals[i];
                        }
                        else {
                            scanlineVals[i] = 0;
                        }
                    }
                }
            }
        }
        // collect all the edgePoints for scanline
        vector<EdgePoint> scanlineEdgePoints;
        for (int i = 0; i < static_cast<int>(scanlineVals.size()); i++) {
            if (scanlineVals[i] != 0) {
                Point<int> imgPos = {offset, i};
                
                Point<Meter> relPos = cameraMatrix.transformToLocalCoordinates(imgPos);
                scanlineEdgePoints.push_back(EdgePoint(imgPos, relPos, scanlineVals[i]));
            }
        }
        sideEdgePoints.push_back(std::move(scanlineEdgePoints));
    }
    // after walking along all scanlines
    // return edgePoints for whole side
    return sideEdgePoints;
}

/*  EdgeDetector.h
 *
 *  Created on: Jan 10, 2013
 *      Author: lutz
 */

#ifndef EDGEDETECTOR_H_
#define EDGEDETECTOR_H_


// include Module.h for the BEGIN_DECLARE_MODULE macro
#include "ModuleFramework/Module.h"

#include "representations/cognition/input/ImageDimensions.h"
#include "representations/cognition/vision/CameraROI.h"
#include "representations/cognition/vision/OmnidirectionalCameraMatrix.h"
#include "representations/cognition/vision/ColorThresholds.h"
#include "representations/cognition/vision/Edges.h"

#include "utils/system/events.h"

#include "representations/image/image.h"

#include "tools/geometry/Point.h"
#include "tools/geometry/LineSegment.h"
#include <utility>
#include <stdint.h>
#include <thread>
#include <future>


/*------------------------------------------------------------------------------------------------*/

BEGIN_DECLARE_MODULE(EdgeDetector)
	REQUIRE(CameraROI)
	REQUIRE(ImageDimensions)
	REQUIRE(Image)
	REQUIRE(ColorThresholds)
	REQUIRE(OmnidirectionalCameraMatrix)

	PROVIDE(Edges)
END_DECLARE_MODULE(EdgeDetector)


using std::vector;

class EdgeDetector : public EdgeDetectorBase, EventCallback
{
public:
	EdgeDetector();
	virtual ~EdgeDetector();


	virtual void execute();
	virtual void init();

	virtual void eventCallback(EventType eventType, void* data);

	enum class Side : int {FRONT = 0, BACK = 1, LEFT = 2, RIGHT = 3};

private:

	vector<vector<LineSegment<int>>> getScanlines(Side side);

	vector<vector<EdgePoint>> scanSide(Side side, vector<vector<LineSegment<int>>> scanlines);

	/* parameters */
	int m_frontCount, m_backCount, m_leftCount, m_rightCount;
	int m_frontDistance, m_backDistance, m_leftDistance, m_rightDistance;
	int m_gradientThreshold;
	int m_nonMaxWidth;

	// precomputed scanlines
	bool initializeScanlines;
	vector<vector<LineSegment<int>>> scanlinesFront;
	vector<vector<LineSegment<int>>> scanlinesBack;
	vector<vector<LineSegment<int>>> scanlinesLeft;
	vector<vector<LineSegment<int>>> scanlinesRight;
};

std::ostream& operator << (std::ostream& os, const EdgeDetector::Side& obj)
{
   os << static_cast<std::underlying_type<EdgeDetector::Side>::type>(obj);
   return os;
}

#endif /* EDGEDETECTOR_H_ */
